1.Presentation:(same)
2.Functinal Requirements:
 2.1. Map creation and editing: Saving a map to a file exactly as edited.
 2.2. Game play: 1) Game starts by user selection of a previously user-saved map, then loads the map.
                2)Implementation of currency, cost to buy/sell a tower, and reward for killing critters
                3)Implementation of all towers’ level-dependent characteristics: cost to increase level, refund rate, range, power, rate of fire, special effects.
                4)Allows the user to start a wave, upon which a wave of critters starts moving from the starting point to the ending point along path cells.
                5)Implementation of three different kinds of towers that are characterized by having different special damage effects, e.g. splash, burning, freezing.
                6)Towers can shoot at the critters, inflicting damage, and eventually killing them.
                7)Towers can target the critters using different strategies, e.g. nearest to the tower, nearest to the end point, weakest, strongest, etc.
                8)Wave-based play, i.e. when all critters in a wave have been killed, the player can place new towers, upgrade towers, and start a new wave.
                9)End of game, e.g. when a certain number of critters reach the exit point of the map, or the critters steal all the player’s coins.
                10)Tower inspection window that shows its current characteristics, allows to sell the tower, increase the level of the tower, and select the tower’s targeting strategy.
3.Programming process:
 3.1(3) Architectural design— short 3-4 pages document including an architectural design diagram, and a short but complete and clear description of the design.
 3.2(5)Design patterns—proper use of at least 3 different design patterns, e.g. observer for map rendering or tower inspection, strategy for tower targeting strategies, singleton for game controller, factory for critter wave creation.
 3.3  Software versioning repository— well-populated history with several dozens of commits, distributed evenly among team members. Ttagged version is created for build 1 and build 2.
 3.4  Unit testing framework—at least 30 relevant test cases testing the most important aspects of the code.
 
